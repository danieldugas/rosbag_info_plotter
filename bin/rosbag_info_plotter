#!/usr/bin/env python
from __future__ import print_function
import os
import rosbag
from tqdm import tqdm
import numpy as np
import argparse
from matplotlib import pyplot as plt

parser = argparse.ArgumentParser()
parser.add_argument('rosbags', nargs='+', type=str, help="rosbag files for which to plot info")
parser.add_argument('--topics', nargs='+', type=str, help="topics for which to plot info")
args = parser.parse_args()

N_ROWS = 1
N_COLS = len(args.rosbags)
fig, axes = plt.subplots(N_ROWS, N_COLS, num="rosbag info")
axes = np.array(axes).reshape((N_ROWS, N_COLS))

print()
[print(p) for p in args.rosbags]
print()

for i, bag_path in enumerate(args.rosbags):
    bag_path = os.path.expanduser(os.path.expandvars(bag_path))
    bag_name = os.path.basename(bag_path)
    print("Loading {}...".format(bag_name))
    bag = rosbag.Bag(bag_path)

    # plot first 10 topics if not specified
    if args.topics is None:
        all_topics = list(bag.get_type_and_topic_info()[1].keys())
        topics = ['...'] + all_topics[:9]

    topic_times = {topic: [] for topic in topics}
    topic_headertimes = {topic: [] for topic in topics}
    for topic, msg, t in tqdm(bag.read_messages(topics=topics)):
        topic_times[topic].append(t.to_time())
        try:
            topic_headertimes[topic].append(msg.header.stamp.to_time())
        except AttributeError:
            pass

    ax = axes[0, i]
    for y, topic in enumerate(topics):
        times = topic_times[topic]
        headertimes = topic_headertimes[topic]
        graph = ax.scatter(times, np.ones_like(times)*(y+1), marker='|')
        ax.scatter(headertimes, np.ones_like(headertimes)*(y+1-0.25), marker='|', facecolor=graph.get_facecolor())
    ax.set_yticks(1+np.arange(len(topics)))
    ax.set_yticklabels(topics)
    ax.title.set_text(bag_name)
    ax.set_ylim([0, len(topics)+1])
    ax.set_xlabel("top: bag time [s] \n bottom: header time [s]")

plt.show()
